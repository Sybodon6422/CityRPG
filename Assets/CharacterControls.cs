//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/CharacterControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CharacterControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CharacterControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CharacterControls"",
    ""maps"": [
        {
            ""name"": ""Default"",
            ""id"": ""c126ab31-e526-4a8e-9550-7e80f5d76ffc"",
            ""actions"": [
                {
                    ""name"": ""movement"",
                    ""type"": ""Value"",
                    ""id"": ""09316ccd-5b90-4562-8b2e-3dbf1fac2ce1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""enteract"",
                    ""type"": ""Button"",
                    ""id"": ""b48667f5-dc5c-4569-ac80-0e3d7062e118"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""leftClick"",
                    ""type"": ""Button"",
                    ""id"": ""0a1030ca-4532-4a92-b6b9-847ba1f81738"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""rightClick"",
                    ""type"": ""Button"",
                    ""id"": ""70f11bb8-baf8-4308-b515-ff971ef196c9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""combatMode"",
                    ""type"": ""Button"",
                    ""id"": ""cd59c192-86bd-4cdf-b4e7-ea02cf81e2a0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""mouse"",
                    ""type"": ""Value"",
                    ""id"": ""1bf0e7b2-5cb5-4ecb-9065-eb36ee0df932"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""c21cd94c-cc25-41c2-94f5-b9cea9114013"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenInventory"",
                    ""type"": ""Button"",
                    ""id"": ""c753fb4c-4a1d-4670-a88e-a349a88b9b34"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""arrowKeys"",
                    ""id"": ""e1817b4e-e628-4756-82a5-39baeb826e84"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f37d3e9f-89b4-4daa-bc2b-1c1206337786"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a5bde56d-f286-44d3-b3d5-d0fd9549474f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5e1db843-615a-40ad-b50d-8562885687a0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""dcfa2b89-5276-4c1b-b804-f20f2f791bf0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""66dd4f72-1325-4e59-912e-5c069d2d1ce8"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""enteract"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b5be4b7a-6757-4f14-af75-2d68bece1bff"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""leftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""98244505-46bb-4b36-8fee-9ab3c919e064"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""rightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c3226d98-c219-4a6c-9ec0-da083c2e1da5"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""combatMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""78e66282-9554-4bee-84d5-c01f2a8cdd4f"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7592e75d-9e47-44a2-b7c6-00f209935c97"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7ad8295e-f580-449d-aca5-ad436cdc318c"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Vehicle"",
            ""id"": ""8054c647-adbe-4212-af11-1b64fe1d6e1f"",
            ""actions"": [
                {
                    ""name"": ""Throttle"",
                    ""type"": ""Value"",
                    ""id"": ""bc5667bd-8094-46fb-a639-5432a636be06"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Brake"",
                    ""type"": ""Value"",
                    ""id"": ""e9ff94dd-6599-4ab6-af51-5aed94398dd8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Steering"",
                    ""type"": ""Value"",
                    ""id"": ""e88d3964-8e1f-40a1-ab26-e668b62ff3a0"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ShiftUp"",
                    ""type"": ""Button"",
                    ""id"": ""72f46596-4e3c-49df-baa3-664aa141cbea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShiftDown"",
                    ""type"": ""Button"",
                    ""id"": ""8fb315c7-2c4d-45bf-99da-07187e32e1e2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7e9b6631-614f-4813-aabd-626378ae16ff"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throttle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ca7d460c-e1c6-4147-8720-d1ecb2fe3d5c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""d5470f53-a8e6-4803-92ff-b33e2e498081"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""55e9c69f-be1d-47ff-b6bd-1214665a17ed"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""d9088867-6289-4b87-8814-0c8c4a408e83"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b537f6cc-ad52-4ef5-b3ed-e01d7f6a5f55"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShiftUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""08998563-41bf-4388-b9c6-f8a517c23531"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShiftDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Default
        m_Default = asset.FindActionMap("Default", throwIfNotFound: true);
        m_Default_movement = m_Default.FindAction("movement", throwIfNotFound: true);
        m_Default_enteract = m_Default.FindAction("enteract", throwIfNotFound: true);
        m_Default_leftClick = m_Default.FindAction("leftClick", throwIfNotFound: true);
        m_Default_rightClick = m_Default.FindAction("rightClick", throwIfNotFound: true);
        m_Default_combatMode = m_Default.FindAction("combatMode", throwIfNotFound: true);
        m_Default_mouse = m_Default.FindAction("mouse", throwIfNotFound: true);
        m_Default_Newaction = m_Default.FindAction("New action", throwIfNotFound: true);
        m_Default_OpenInventory = m_Default.FindAction("OpenInventory", throwIfNotFound: true);
        // Vehicle
        m_Vehicle = asset.FindActionMap("Vehicle", throwIfNotFound: true);
        m_Vehicle_Throttle = m_Vehicle.FindAction("Throttle", throwIfNotFound: true);
        m_Vehicle_Brake = m_Vehicle.FindAction("Brake", throwIfNotFound: true);
        m_Vehicle_Steering = m_Vehicle.FindAction("Steering", throwIfNotFound: true);
        m_Vehicle_ShiftUp = m_Vehicle.FindAction("ShiftUp", throwIfNotFound: true);
        m_Vehicle_ShiftDown = m_Vehicle.FindAction("ShiftDown", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Default
    private readonly InputActionMap m_Default;
    private IDefaultActions m_DefaultActionsCallbackInterface;
    private readonly InputAction m_Default_movement;
    private readonly InputAction m_Default_enteract;
    private readonly InputAction m_Default_leftClick;
    private readonly InputAction m_Default_rightClick;
    private readonly InputAction m_Default_combatMode;
    private readonly InputAction m_Default_mouse;
    private readonly InputAction m_Default_Newaction;
    private readonly InputAction m_Default_OpenInventory;
    public struct DefaultActions
    {
        private @CharacterControls m_Wrapper;
        public DefaultActions(@CharacterControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @movement => m_Wrapper.m_Default_movement;
        public InputAction @enteract => m_Wrapper.m_Default_enteract;
        public InputAction @leftClick => m_Wrapper.m_Default_leftClick;
        public InputAction @rightClick => m_Wrapper.m_Default_rightClick;
        public InputAction @combatMode => m_Wrapper.m_Default_combatMode;
        public InputAction @mouse => m_Wrapper.m_Default_mouse;
        public InputAction @Newaction => m_Wrapper.m_Default_Newaction;
        public InputAction @OpenInventory => m_Wrapper.m_Default_OpenInventory;
        public InputActionMap Get() { return m_Wrapper.m_Default; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DefaultActions set) { return set.Get(); }
        public void SetCallbacks(IDefaultActions instance)
        {
            if (m_Wrapper.m_DefaultActionsCallbackInterface != null)
            {
                @movement.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnMovement;
                @movement.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnMovement;
                @movement.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnMovement;
                @enteract.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnEnteract;
                @enteract.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnEnteract;
                @enteract.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnEnteract;
                @leftClick.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnLeftClick;
                @leftClick.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnLeftClick;
                @leftClick.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnLeftClick;
                @rightClick.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnRightClick;
                @rightClick.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnRightClick;
                @rightClick.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnRightClick;
                @combatMode.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnCombatMode;
                @combatMode.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnCombatMode;
                @combatMode.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnCombatMode;
                @mouse.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnMouse;
                @mouse.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnMouse;
                @mouse.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnMouse;
                @Newaction.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnNewaction;
                @OpenInventory.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnOpenInventory;
                @OpenInventory.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnOpenInventory;
                @OpenInventory.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnOpenInventory;
            }
            m_Wrapper.m_DefaultActionsCallbackInterface = instance;
            if (instance != null)
            {
                @movement.started += instance.OnMovement;
                @movement.performed += instance.OnMovement;
                @movement.canceled += instance.OnMovement;
                @enteract.started += instance.OnEnteract;
                @enteract.performed += instance.OnEnteract;
                @enteract.canceled += instance.OnEnteract;
                @leftClick.started += instance.OnLeftClick;
                @leftClick.performed += instance.OnLeftClick;
                @leftClick.canceled += instance.OnLeftClick;
                @rightClick.started += instance.OnRightClick;
                @rightClick.performed += instance.OnRightClick;
                @rightClick.canceled += instance.OnRightClick;
                @combatMode.started += instance.OnCombatMode;
                @combatMode.performed += instance.OnCombatMode;
                @combatMode.canceled += instance.OnCombatMode;
                @mouse.started += instance.OnMouse;
                @mouse.performed += instance.OnMouse;
                @mouse.canceled += instance.OnMouse;
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
                @OpenInventory.started += instance.OnOpenInventory;
                @OpenInventory.performed += instance.OnOpenInventory;
                @OpenInventory.canceled += instance.OnOpenInventory;
            }
        }
    }
    public DefaultActions @Default => new DefaultActions(this);

    // Vehicle
    private readonly InputActionMap m_Vehicle;
    private IVehicleActions m_VehicleActionsCallbackInterface;
    private readonly InputAction m_Vehicle_Throttle;
    private readonly InputAction m_Vehicle_Brake;
    private readonly InputAction m_Vehicle_Steering;
    private readonly InputAction m_Vehicle_ShiftUp;
    private readonly InputAction m_Vehicle_ShiftDown;
    public struct VehicleActions
    {
        private @CharacterControls m_Wrapper;
        public VehicleActions(@CharacterControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Throttle => m_Wrapper.m_Vehicle_Throttle;
        public InputAction @Brake => m_Wrapper.m_Vehicle_Brake;
        public InputAction @Steering => m_Wrapper.m_Vehicle_Steering;
        public InputAction @ShiftUp => m_Wrapper.m_Vehicle_ShiftUp;
        public InputAction @ShiftDown => m_Wrapper.m_Vehicle_ShiftDown;
        public InputActionMap Get() { return m_Wrapper.m_Vehicle; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(VehicleActions set) { return set.Get(); }
        public void SetCallbacks(IVehicleActions instance)
        {
            if (m_Wrapper.m_VehicleActionsCallbackInterface != null)
            {
                @Throttle.started -= m_Wrapper.m_VehicleActionsCallbackInterface.OnThrottle;
                @Throttle.performed -= m_Wrapper.m_VehicleActionsCallbackInterface.OnThrottle;
                @Throttle.canceled -= m_Wrapper.m_VehicleActionsCallbackInterface.OnThrottle;
                @Brake.started -= m_Wrapper.m_VehicleActionsCallbackInterface.OnBrake;
                @Brake.performed -= m_Wrapper.m_VehicleActionsCallbackInterface.OnBrake;
                @Brake.canceled -= m_Wrapper.m_VehicleActionsCallbackInterface.OnBrake;
                @Steering.started -= m_Wrapper.m_VehicleActionsCallbackInterface.OnSteering;
                @Steering.performed -= m_Wrapper.m_VehicleActionsCallbackInterface.OnSteering;
                @Steering.canceled -= m_Wrapper.m_VehicleActionsCallbackInterface.OnSteering;
                @ShiftUp.started -= m_Wrapper.m_VehicleActionsCallbackInterface.OnShiftUp;
                @ShiftUp.performed -= m_Wrapper.m_VehicleActionsCallbackInterface.OnShiftUp;
                @ShiftUp.canceled -= m_Wrapper.m_VehicleActionsCallbackInterface.OnShiftUp;
                @ShiftDown.started -= m_Wrapper.m_VehicleActionsCallbackInterface.OnShiftDown;
                @ShiftDown.performed -= m_Wrapper.m_VehicleActionsCallbackInterface.OnShiftDown;
                @ShiftDown.canceled -= m_Wrapper.m_VehicleActionsCallbackInterface.OnShiftDown;
            }
            m_Wrapper.m_VehicleActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Throttle.started += instance.OnThrottle;
                @Throttle.performed += instance.OnThrottle;
                @Throttle.canceled += instance.OnThrottle;
                @Brake.started += instance.OnBrake;
                @Brake.performed += instance.OnBrake;
                @Brake.canceled += instance.OnBrake;
                @Steering.started += instance.OnSteering;
                @Steering.performed += instance.OnSteering;
                @Steering.canceled += instance.OnSteering;
                @ShiftUp.started += instance.OnShiftUp;
                @ShiftUp.performed += instance.OnShiftUp;
                @ShiftUp.canceled += instance.OnShiftUp;
                @ShiftDown.started += instance.OnShiftDown;
                @ShiftDown.performed += instance.OnShiftDown;
                @ShiftDown.canceled += instance.OnShiftDown;
            }
        }
    }
    public VehicleActions @Vehicle => new VehicleActions(this);
    public interface IDefaultActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnEnteract(InputAction.CallbackContext context);
        void OnLeftClick(InputAction.CallbackContext context);
        void OnRightClick(InputAction.CallbackContext context);
        void OnCombatMode(InputAction.CallbackContext context);
        void OnMouse(InputAction.CallbackContext context);
        void OnNewaction(InputAction.CallbackContext context);
        void OnOpenInventory(InputAction.CallbackContext context);
    }
    public interface IVehicleActions
    {
        void OnThrottle(InputAction.CallbackContext context);
        void OnBrake(InputAction.CallbackContext context);
        void OnSteering(InputAction.CallbackContext context);
        void OnShiftUp(InputAction.CallbackContext context);
        void OnShiftDown(InputAction.CallbackContext context);
    }
}
